singularity {
  enabled = true
}

env {
    JAVA_TOOL_OPTIONS = "-Djava.io.tmpdir=./tmp"
}

process {

    executor = 'slurm'
    clusterOptions = { "-A $params.priority ${params.clusterOptions ?: ''}" }

    //
    // Label-specific configuration options
    //

    withLabel:process_single {
        cpus   = { 1                   }
        memory = { 12.GB * task.attempt }
        time   = { 1.h  * task.attempt }
    }
    withLabel:process_low {
        cpus   = { 6     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 1.h   * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 12    * task.attempt }
        memory = { 42.GB * task.attempt }
        time   = { 1.h   * task.attempt }
    }
    withLabel:process_high {
        cpus   = { 18    * task.attempt }
        memory = { 54.GB * task.attempt }
        time   = { 1.h   * task.attempt }
    }
    withLabel:'sentieon' {
        beforeScript = { "export PATH=\$PATH:\$SENTIEON_INSTALL_DIR/sentieon-genomics-202112.02/bin" }
    }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    //
    // Process-specific configuration options
    //

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*CHECK_INPUT:SAMPLESHEET_CHECK' {
        cpus = 1
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        cpus = 1
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    //
    // Read QC options
    //

    withName: 'FASTQC' {
        beforeScript = {" mkdir ./tmp "}
        cpus = 6
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/reports/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    //
    // Genome preparation options
    //

    withName: '.*PREPARE_REFERENCES:BWAMEM2_INDEX_GENOME' {
        cpus = 1
        ext.when = {!params.bwamem2_index && params.aligner == "bwamem2"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }

    withName: '.*PREPARE_REFERENCES:BWAMEM2_INDEX_SHIFT_MT' {
        ext.when = {!params.mt_bwamem2_index_shift && params.mt_fasta_shift && !(params.analysis_type == "wes") && params.aligner == "bwamem2"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }

    withName: '.*PREPARE_REFERENCES:SENTIEON_BWAINDEX_GENOME' {
        cpus = 1
        ext.when = {!params.bwa_index && params.aligner == "sentieon"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:SENTIEON_BWAINDEX_SHIFT_MT' {
        ext.when = {!params.mt_bwa_index_shift && params.mt_fasta_shift && !(params.analysis_type == "wes") && params.aligner == "sentieon"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:BWA_INDEX_GENOME' {
        ext.when = {!params.bwa_index && !(params.aligner == "sentieon")}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:SAMTOOLS_FAIDX_GENOME' {
        ext.when = {!params.fasta_fai}
        cpus = 1
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }

    withName: '.*PREPARE_REFERENCES:SAMTOOLS_FAIDX_SHIFT_MT' {
        ext.when = {!params.mt_fai_shift && params.mt_fasta_shift && !(params.analysis_type == "wes")}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_SD' {
        ext.when = {!params.sequence_dictionary}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*dict"
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_SD_SHIFT_MT' {
        ext.when = {!params.mt_sequence_dictionary_shift && params.mt_fasta_shift && !(params.analysis_type == "wes")}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*dict"
        ]
    }

    withName: '.*PREPARE_REFERENCES:GET_CHROM_SIZES' {
        cpus = 1
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:UNTAR_VCFANNO' {
        cpus = 1
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_DBSNP' {
        ext.when = {params.known_dbsnp && !params.known_dbsnp_tbi}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*tbi"
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_GNOMAD_AF' {
        ext.when = {params.gnomad_af && !params.gnomad_af_idx}
        ext.args   = '-s 1 -b 2 -e 2'
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*tbi"
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:CHECK_INPUT_VCF' {
        ext.when = {params.gnomad_vcf}
        cpus = 1
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:SPLIT_MULTIALLELICS_PV' {
        cpus = 1
        ext.when = {params.gnomad_vcf}
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:REMOVE_DUPLICATES_PV' {
        cpus = 1
        ext.when = {params.gnomad_vcf}
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:TABIX_PV' {
        cpus = 1
        ext.when = {params.gnomad_vcf}
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_PT' {
        ext.when = { params.target_bed && params.target_bed.endsWith(".gz") }
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_PBT' {
        ext.when = { params.target_bed && !params.target_bed.endsWith(".gz") }
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_BILT' {
        cpus = 1
        ext.when = { params.target_bed }
        ext.prefix = { "${meta.id}_target" }
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_ILT' {
        cpus = 1
        ext.when = { params.target_bed }
        ext.args = '--PADDING 100 -SUBDIVISION_MODE INTERVAL_SUBDIVISION --SCATTER_COUNT 2'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:CAT_CAT_BAIT' {
        cpus = 1
        ext.when = { params.target_bed }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // Create bed and interval files for scatter operations
    //

    withName: '.*SCATTER_GENOME:BUILD_BED' {
        ext.when = { params.annotate_snv_switch && !(params.analysis_type == "wes")}
    }

    withName: '.*SCATTER_GENOME:GATK4_SPLITINTERVALS' {
        memory = 50.GB
        ext.args   = { "--subdivision-mode BALANCING_WITHOUT_INTERVAL_SUBDIVISION --scatter-count 22" }
        ext.prefix = { "${meta.id}_genome_intervals" }
        ext.when   = { params.annotate_snv_switch && !(params.analysis_type == "wes")}
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // Bwamem2 alignment options
    //

    withName: '.*ALIGN_BWAMEM2:.*' {
        ext.when = params.aligner.equals("bwamem2")
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:BWAMEM2_MEM' {
        cpus = 8
        ext.args = { "-M -K 100000000 -R ${meta.read_group}" }
        publishDir = [
            path: { "${params.outdir}/alignment/bwamem2_align" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:SAMTOOLS_STATS' {
        cpus = 1
        ext.args = '-s --remove-overlaps'
        publishDir = [
            path: { "${params.outdir}/alignment/samtools_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:SAMTOOLS_MERGE' {
        cpus = 6
        ext.args = { "-n" }
        ext.prefix = { "${meta.id}_merged" }
        publishDir = [
            path: { "${params.outdir}/alignment/samtools_merge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:MARKDUPLICATES' {
        cpus = 1
        memory = 20.GB
        clusterOptions = { "-A $params.priority ${params.clusterOptions ?: ''} ${task.memory ? "--mem ${task.memory.mega * 1.15 as long}M" : ''}" }
        ext.prefix = { "${meta.id}_sorted_md" }
        publishDir = [
            path: { "${params.outdir}/alignment/markduplicates" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    //
    // Sentieon alignment options
    //

    withName: '.*ALIGN_SENTIEON:.*' {
        ext.when = params.aligner.equals("sentieon")
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BWAMEM' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group} " }
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/alignment/sentieon_align" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DATAMETRICS' {
        publishDir = [
            path: { "${params.outdir}/alignment/sentieon_bam_metrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_LOCUSCOLLECTOR' {
        publishDir = [
            path: { "${params.outdir}/alignment/sentieon_locuscollector" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DEDUP' {
        ext.args = { $params.rmdup ? "--rmdup" : '' }
        publishDir = [
            path: { "${params.outdir}/alignment/sentieon_dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BQSR' {
        publishDir = [
            path: { "${params.outdir}/alignment/sentieon_recal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // Sentieon SNV calling options
    //

    withName: '.*CALL_SNV_SENTIEON:.*' {
        ext.when = params.variant_caller.equals("sentieon")
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SENTIEON_DNASCOPE' {
        ext.when = params.variant_caller.equals("sentieon")
        ext.args2  = { [
            params.variant_type  ? "--var_type ${params.variant_type}"  : '',
            params.pcrfree       ? "--pcr_indel_model NONE"             : ''
        ].join(" ") }
        publishDir = [
            path: { "${params.outdir}/variant_calling_snv/sentieon_dnascope" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SENTIEON_DNAMODELAPPLY' {
        ext.when = { params.variant_caller.equals("sentieon") && params.ml_model }

        publishDir = [
            path: { "${params.outdir}/variant_calling_snv/sentieon_dnamodelapply" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SPLIT_MULTIALLELICS_SEN' {
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        ext.when = params.variant_caller.equals("sentieon")
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:REMOVE_DUPLICATES_SEN' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        ext.when = params.variant_caller.equals("sentieon")
        publishDir = [
            path: { "${params.outdir}/variant_calling_snv/sentieon_normvcf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:TABIX_SEN' {
        ext.when = params.variant_caller.equals("sentieon")
        publishDir = [
            path: { "${params.outdir}/variant_calling_snv/sentieon_normvcf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // Bam QC options
    //

    withName: '.*QC_BAM:PICARD_COLLECTMULTIPLEMETRICS' {
        cpus = 1
        beforeScript = {"mkdir ./tmp"}
        publishDir = [
            path: { "${params.outdir}/bamqc/collectmultiplemetrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:QUALIMAP_BAMQC' {
        cpus = 4
        clusterOptions = { "-A $params.priority ${params.clusterOptions ?: ''} ${task.memory ? "--mem ${task.memory.mega * 1.15 as long}M" : ''}" }
        publishDir = [
            path: { "${params.outdir}/bamqc/qualimap" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*QC_BAM:TIDDIT_COV' {
        cpus = 1
        ext.args = '-z 500 -w'
        publishDir = [
            path: { "${params.outdir}/bamqc/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:UCSC_WIGTOBIGWIG' {
        cpus = 1
        ext.args = '-clip'
        publishDir = [
            path: { "${params.outdir}/bamqc/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:MOSDEPTH' {
        cpus = 4
        ext.args = '--d4'
        publishDir = [
            path: { "${params.outdir}/bamqc/mosdepth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    //
    // Repeat expansion calling options
    //

    withName: '.*CALL_REPEAT_EXPANSIONS:EXPANSIONHUNTER' {
        cpus = 1
        publishDir = [
            path: { "${params.outdir}/repeat_expansions/expansionhunter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_REPEAT_EXPANSIONS:STRANGER' {
        cpus = 1
        publishDir = [
            path: { "${params.outdir}/repeat_expansions/stranger" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    //
    // SNV calling options
    //

    withName: '.*CALL_SNV_DEEPVARIANT:.*' {
        ext.when = params.variant_caller.equals("deepvariant")
    }

    withName: '.*CALL_SNV:CALL_SNV_DEEPVARIANT:DEEPVARIANT' {
        cpus = 18
        memory = 60.GB
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = { "--model_type=${params.analysis_type.toUpperCase()}" }
        ext.prefix = { "${meta.id}_deepvar" }
        publishDir = [
            path: { "${params.outdir}/variant_calling_snv/deepvariant" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_DEEPVARIANT:GLNEXUS' {
        cpus = 10
        memory = 10.GB
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_DEEPVARIANT:SPLIT_MULTIALLELICS_GL' {
        cpus = 6
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = '--output-type z --multiallelics -both'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:REMOVE_DUPLICATES_GL' {
        cpus = 6
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/variant_calling_snv/glnexus_norm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:TABIX_GL' {
        ext.when = { params.variant_caller.equals("deepvariant") }
        publishDir = [
            path: { "${params.outdir}/variant_calling_snv/glnexus_norm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // Structural variant calling options
    //

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_MANTA:MANTA' {
        cpus = 10
        ext.prefix = { "${meta.id}_manta" }
        publishDir = [
            path: { "${params.outdir}/variant_calling_sv/manta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:TIDDIT_SV' {
        cpus = 10
        ext.args   = '-p 6'
        publishDir = [
            path: { "${params.outdir}/variant_calling_sv/tiddit" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:SVDB_MERGE_TIDDIT' {
        cpus = 1
        ext.args   = '--notag --pass_only'
        ext.prefix = { "${meta.id}_tiddit" }
        publishDir = [
            path: { "${params.outdir}/variant_calling_sv/tiddit/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:GENERATE_PYTOR" {
        cpus = 1
        ext.args   = { params.cnvpytor_chr ? "-chrom ${params.cnvpytor_chr}" : '' }
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:HISTOGRAMS" {
        cpus = 1
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:PARTITIONS" {
        cpus = 1
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:CALL_CNVS" {
        cpus = 1
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:VIEW" {
        cpus = 1
        ext.prefix = { "${meta.id}_cnvpytor" }
        publishDir = [
            path: { "${params.outdir}/variant_calling_sv/cnvpytor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:SVDB_MERGE' {
        cpus = 1
        ext.args = '--pass_only --same_order'
        publishDir = [
            path: { "${params.outdir}/variant_calling_sv/svdb_merge" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*GENS:COLLECTREADCOUNTS' {
        ext.args = '--interval-merging-rule OVERLAPPING_ONLY'
    }

    withName: GENS {
        publishDir = [
            path: { "${params.outdir}/gens" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // Structural variant annotation options
    //

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:SVDB_QUERY' {
        cpus = 1
        ext.when = { params.annotate_sv_switch }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:PICARD_SORTVCF' {
        cpus = 1
        ext.when = { params.annotate_sv_switch }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:BCFTOOLS_VIEW' {
        cpus = 1
        ext.when = { params.annotate_sv_switch }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:ENSEMBLVEP_SV' {
        cpus = 1
        ext.when = { params.annotate_sv_switch }
        ext.args   = [
            '--dir_plugins vep_cache_and_plugins/Plugins',
            '--plugin pLI,vep_cache_and_plugins/pLI_values_107.txt',
            '--distance 5000',
            '--buffer_size 100',
            '--format vcf --fork 4 --vcf --max_sv_size 248956422',
            '--appris --biotype --cache --canonical --ccds',
            '--domains --exclude_predicted --force_overwrite',
            '--hgvs --humdiv --no_stats --merged --no_progress --numbers',
            '--offline --per_gene --protein --symbol --tsl --uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/annotate_sv" },
            mode: params.publish_dir_mode,
        ]
    }

    //
    // Score and rank structural variants
    //

    withName: '.*RANK_VARIANTS_SV:GENMOD_ANNOTATE' {
        cpus = 1
        ext.when = { params.annotate_sv_switch }
        ext.args = {
            (params.genome == 'GRCh37') ? '--annotate_regions --genome-build 37' : '--annotate_regions --genome-build 38'
        }
    }

    withName: '.*RANK_VARIANTS_SV:GENMOD_SCORE' {
        cpus = 1
        ext.when = { params.annotate_sv_switch }
        ext.args = " --rank_results "
    }

    withName: '.*RANK_VARIANTS_SV:GENMOD_COMPOUND' {
        cpus = 1
        ext.when = { params.annotate_sv_switch }
        publishDir = [
            path: { "${params.outdir}/genmod" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // SNV annotation options
    //

    withName: '.*ANNOTATE_SNVS:VCFANNO' {
        cpus = 10
        ext.when = { params.annotate_snv_switch }
        ext.prefix = { "${meta.id}_vcfanno" }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:BCFTOOLS_ROH' {
        cpus = 1
        ext.args = { "--samples ${meta.id} --skip-indels " }
        ext.when = { params.annotate_snv_switch }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:RHOCALL_ANNOTATE' {
        cpus = 1
        ext.args = { "--v14 " }
        ext.when = { params.annotate_snv_switch }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:BCFTOOLS_VIEW' {
        ext.args = { '--output-type z ' }
        ext.when = { params.annotate_snv_switch }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:GATK4_SELECTVARIANTS' {
        cpus = 1
        memory = 60.GB
        ext.prefix = { "${meta.id}_${intervals.simpleName}" }
        ext.when   = { params.annotate_snv_switch }
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ANNOTATE_SNVS:ENSEMBLVEP_SNV' {
        cpus = 1
        ext.prefix = { "${vcf.simpleName}_vep" }
        ext.when   = { params.annotate_snv_switch }
        ext.args   = [
            '--dir_plugins vep_cache_and_plugins/Plugins',
            '--plugin LoFtool,vep_cache_and_plugins/LoFtool_scores.txt',
            '--plugin pLI,vep_cache_and_plugins/pLI_values_107.txt',
            '--plugin SpliceAI,snv=vep_cache_and_plugins/spliceai_21_scores_raw_snv_-v1.3-.vcf.gz,indel=vep_cache_and_plugins/spliceai_21_scores_raw_snv_-v1.3-.vcf.gz',
            '--plugin MaxEntScan,vep_cache_and_plugins/fordownload,SWA,NCSS',
            '--plugin dbNSFP,vep_cache_and_plugins/dbNSFP4.1a_21M_grch37.gz,GERP++_RS,GERP++_NR,phyloP100way_vertebrate,phastCons100way_vertebrate,REVEL_rankscore,REVEL_score,rs_dbSNP150',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --fork 4 --max_sv_size 248956422',
            '--appris --biotype --cache --canonical --ccds',
            '--domains --exclude_predicted --force_overwrite',
            '--hgvs --humdiv --no_progress --no_stats --numbers',
            '--merged --polyphen p --protein --offline --regulatory --sift p --symbol --tsl --vcf',
            '--uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*ANNOTATE_SNVS:TABIX_VEP' {
        ext.prefix = { "${input.simpleName}_vep" }
        ext.when   = { params.annotate_snv_switch }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
        ]
    }

    //
    // Merge mitochondrial and genomic vcfs
    //

    withName: '.*RAREDISEASE:BCFTOOLS_CONCAT' {
        ext.prefix = { "${meta.id}_mito_genome_merged" }
    }

    //
    // Score and rank SNVs
    //

    withName: '.*RANK_VARIANTS_SNV:GENMOD_ANNOTATE' {
        cpus = 1
        ext.args = {
            (params.genome == 'GRCh37') ? '--annotate_regions --genome-build 37' : '--annotate_regions --genome-build 38'
        }
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_MODELS' {
        cpus = 1
        ext.args = " --whole_gene "
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_SCORE' {
        cpus = 1
        ext.args = " --rank_results "
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_COMPOUND' {
        cpus = 1
        publishDir = [
            path: { "${params.outdir}/genmod" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    //
    // ANALYSE_MT:PREPARE_MT_ALIGNMENT
    //

    withName: '.*ANALYSE_MT:CONVERT_MT_BAM_TO_FASTQ:GATK4_PRINTREADS_MT' {
        memory = 42.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        ext.args = [
            params.genome == "GRCh37" ? "-L MT" : "-L chrM",
            "--read-filter MateOnSameContigOrNoMappedMateReadFilter",
            "--read-filter MateUnmappedAndUnmappedReadFilter"
        ].join(" ").trim()
    }

    withName: '.*ANALYSE_MT:CONVERT_MT_BAM_TO_FASTQ:GATK4_REVERTSAM_MT' {
        cpus = 1
        memory = 60.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        ext.args = '--OUTPUT_BY_READGROUP false --VALIDATION_STRINGENCY LENIENT --ATTRIBUTE_TO_CLEAR FT --ATTRIBUTE_TO_CLEAR CO --SORT_ORDER queryname --RESTORE_ORIGINAL_QUALITIES false'
    }

    withName: '.*ANALYSE_MT:CONVERT_MT_BAM_TO_FASTQ:GATK4_SAMTOFASTQ_MT' {
        cpus = 1
        memory = 42.GB
        ext.args = '--VALIDATION_STRINGENCY LENIENT'
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    //
    // ANALYSE_MT:ALIGN_AND_CALL_MT
    //

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:BWAMEM2_MEM_MT' {
        cpus = 6
        ext.args = { "-M -K 100000000 -R \"@RG\\tID:${meta.id}\\tSM:${meta.sample}\\tLB:${meta.library}\\tPL:illumina\"" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") && params.aligner == "bwamem2" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:SENTIEON_BWAMEM_MT' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group}" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") && params.aligner == "sentieon" }
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_MERGEBAMALIGNMENT_MT' {
        cpus = 8
        memory = 60.GB
        ext.args = '--CREATE_INDEX true --MAX_GAPS -1  --SORT_ORDER queryname --INCLUDE_SECONDARY_ALIGNMENTS false --PAIRED_RUN false --VALIDATION_STRINGENCY LENIENT'
        ext.prefix = { "${meta.id}_merged" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:PICARD_ADDORREPLACEREADGROUPS_MT' {
        cpus = 1
        memory = 42.GB
        ext.args =  { [
            "--VALIDATION_STRINGENCY LENIENT",
            "--RGLB lib",
            "--RGPL ILLUMINA",
            "--RGPU barcode",
            "--RGSM ${meta.id}"
        ].join(' ' ).trim() }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:PICARD_MARKDUPLICATES_MT' {
        cpus = 1
        memory = 72.GB
        ext.args = '--VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix = { "${meta.id}_markduplicates" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:SAMTOOLS_SORT_MT' {
        cpus = 1
        ext.prefix = { "${meta.id}_sorted" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_MUTECT2_MT' {
        beforeScript = {"mkdir ./tmp"}
        memory = 72.GB
        cpus = 1
        ext.args = '--mitochondria-mode TRUE'
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_FILTERMUTECTCALLS_MT' {
        memory = 60.GB
        ext.prefix = { "${meta.id}_filtered" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:PICARD_RENAMESAMPLEINVCF_MT' {
        memory = 30.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_filtered" }
    }

    //
    // ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT
    //

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:BWAMEM2_MEM_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") && params.aligner == "bwamem2" }
        ext.args = { "-M -K 100000000 -R ${meta.read_group}" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:SENTIEON_BWAMEM_MT' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group}" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") && params.aligner == "sentieon" }
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:GATK4_MERGEBAMALIGNMENT_MT' {
        memory = 42.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args = '--CREATE_INDEX true --MAX_GAPS -1  --SORT_ORDER queryname --INCLUDE_SECONDARY_ALIGNMENTS false --PAIRED_RUN false --VALIDATION_STRINGENCY LENIENT'
        ext.prefix = { "${meta.id}_merged_shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:PICARD_ADDORREPLACEREADGROUPS_MT' {
        memory = 42.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args = { [
            "--VALIDATION_STRINGENCY LENIENT",
            "--RGLB lib",
            "--RGPL ${params.platform}",
            "--RGPU barcode",
            "--RGSM ${meta.id}"
        ].join(' ' ).trim() }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:PICARD_MARKDUPLICATES_MT' {
        memory = 72.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args = '--VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix = { "${meta.id}_markduplicates__shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:SAMTOOLS_SORT_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_sorted_shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:GATK4_MUTECT2_MT' {
        memory = 72.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args = '--mitochondria-mode TRUE'
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:HAPLOCHECK_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:GATK4_FILTERMUTECTCALLS_MT' {
        memory = 60.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_filtered__shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:PICARD_RENAMESAMPLEINVCF_MT' {
        memory = 16.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_filtered__shifted" }
    }

    //
    // ANALYSE_MT:PICARD_LIFTOVERVCF
    //

    withName: '.*ANALYSE_MT:PICARD_LIFTOVERVCF' {
        memory = 60.GB
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_liftover" }
    }

    //
    // ANALYSE_MT:MERGE_ANNOTATE_MT
    //

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:GATK4_MERGEVCFS_LIFT_UNLIFT_MT' {
        ext.prefix = { "${meta.id}_merged" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:GATK4_VARIANTFILTRATION_MT' {
        ext.prefix = { "${meta.id}_filt" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:SPLIT_MULTIALLELICS_MT' {
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:TABIX_TABIX_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:REMOVE_DUPLICATES_MT' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        publishDir = [
            path: { "${params.outdir}/gatk4" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:TABIX_TABIX_MT2' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:CHANGE_NAME_VCF_MT' {
        ext.file_type = 'vcf.gz'
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:BCFTOOLS_MERGE_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:HMTNOTE_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:TABIX_TABIX_MT3' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:ENSEMBLVEP_MT' {
        cpus = 1
        ext.prefix = { "${vcf.simpleName}_vep" }
        ext.args   = [
            '--dir_plugins vep_cache_and_plugins/Plugins',
            '--plugin LoFtool,vep_cache_and_plugins/LoFtool_scores.txt',
            '--plugin pLI,vep_cache_and_plugins/pLI_values_107.txt',
            '--plugin SpliceAI,snv=vep_cache_and_plugins/spliceai_21_scores_raw_snv_-v1.3-.vcf.gz,indel=vep_cache_and_plugins/spliceai_21_scores_raw_snv_-v1.3-.vcf.gz',
            '--plugin MaxEntScan,vep_cache_and_plugins/fordownload,SWA,NCSS',
            '--plugin dbNSFP,vep_cache_and_plugins/dbNSFP4.1a_21M_grch37.gz,GERP++_RS,GERP++_NR,phyloP100way_vertebrate,phastCons100way_vertebrate,REVEL_rankscore,REVEL_score,rs_dbSNP150',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --fork 4 --max_sv_size 248956422',
            '--appris --biotype --cache --canonical --ccds --compress_output bgzip',
            '--domains --exclude_predicted --force_overwrite',
            '--hgvs --humdiv --no_progress --no_stats --numbers',
            '--merged --polyphen p --protein --offline --regulatory --sift p --symbol --tsl --vcf',
            '--uniprot'
        ].join(' ')
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:HAPLOGREP2_CLASSIFY_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    //
    // SENTIEON_TNSCOPE_MT_CALL
    //

    withName: '.*SENTIEON_TNSCOPE' {
        ext.args = { (params.genome == "GRCh37") ? " --interval MT " : "--interval chrM" }
        ext.args2 = " --min_init_normal_lod 0,5 --min_normal_lod 2,0 --min_init_tumor_lod 1,0 --min_tumor_lod 2,8 --trim_soft_clip "
        ext.when = params.variant_caller.equals("sentieon")
    }
}

profiles {
    stub_prio {
        params {
           priority = 'development'
           clusterOptions = "--qos=low"
           max_memory = 6.GB
           max_cpus   = 1
           max_time   = 1.h
        }
    }

    dev_prio {
        params {
            priority = 'development'
            clusterOptions = "--qos=low"
        }
    }

    prod_prio {
        params {
            priority = 'production'
            clusterOptions = "--qos=low"
        }
    }
}
